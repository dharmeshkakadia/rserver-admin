import java.text.SimpleDateFormat

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'application'
apply plugin: 'versions'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'
apply plugin: 'errorprone'

group = 'org.obiba.rserver'

mainClassName = "org.obiba.rserver.Application"

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

defaultTasks 'build'

ext {
  rVersion = '0.6-8.1'
  slf4jVersion = '1.7.6'
  springBootVersion = '1.0.0.RC1'
}

buildscript {
  repositories {
    maven { url 'http://repo.obiba.org/repo' }
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-1'
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:latest.release'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:latest.release'
    classpath "org.springframework.boot:spring-boot-gradle-plugin:1.0.0.RC1"
  }
}

repositories {
  maven { url 'http://repo.obiba.org/repo' }
  mavenCentral()
  mavenLocal()
}

configurations {
  pmd
  compile
  runtime
  jdeb
  all*.exclude group: 'commons-logging'
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Implementation-Vendor-Id': project.group,
        'Implementation-Vendor': 'OBiBa'
  }
}

dependencies {

  compile "com.google.guava:guava:16.0.1"
  compile "net.rforge:REngine:${rVersion}"
  compile "net.rforge:Rserve:${rVersion}"
  compile "org.slf4j:slf4j-api:${slf4jVersion}"
  compile "org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}"
  compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
    exclude module: "spring-boot-starter-tomcat"
  }

  testCompile "junit:junit:4.11"
  testCompile "org.easytesting:fest-assert-core:2.0M10"
  testCompile "org.mockito:mockito-all:1.9.5"

  runtime "ch.qos.logback:logback-classic:1.1.1"
  runtime "org.slf4j:slf4j-api:${slf4jVersion}"
  runtime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"

  jdeb "org.vafer:jdeb:1.0.1"
  pmd 'net.sourceforge.pmd:pmd:5.0.5'
}

tasks.startScripts {
  classpath += files('src/dist/conf')
  doLast {
    def unixScriptFile = file getUnixScript()
    unixScriptFile.text = unixScriptFile.text
        .replace('-classpath "$CLASSPATH"', '-Drserver.home="$APP_HOME" -classpath "$CLASSPATH"')
        .replace('$APP_HOME/lib/conf', '$APP_HOME/conf')

    def windowsScriptFile = file getWindowsScript()
    windowsScriptFile.text = windowsScriptFile.text
        .replace('-classpath "%CLASSPATH%"', '-Drserver.home="%APP_HOME%" -classpath "%CLASSPATH%"')
        .replace('%APP_HOME%\\lib\\conf', '%APP_HOME%\\conf')
  }
}

tasks.distZip {
  archiveName = "${baseName}-${version}.zip"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.11'
}

def buildTime() {
  return new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
}

task distUnzipped(dependsOn: ['distZip']) << {
  // get the distribution files from the zip
  ant.unzip(src: "build/distributions/${rootProject.name}-${version}.zip", dest: "build/work")
}

task distDeb(dependsOn: ['distUnzipped']) << {
  ant.taskdef(name: 'deb', classname: 'org.vafer.jdeb.ant.DebAntTask', classpath: configurations.jdeb.asPath)

  // replace version token
  ant.copy(todir: "build/work/debian") {
    fileset(dir: "src/main/deb/debian")
    filterset(begintoken: "[[", endtoken: "]]") {
      filter(token: "version", value: "${version}")
    }
  }

  // build the debian package
  ant.deb(
      destfile: "build/distributions/${rootProject.name}-${version}-b${buildTime()}_all.deb",
      control: 'build/work/debian/',
      verbose: 'true') {

    tarfileset(
        dir: "build/work/${rootProject.name}-${version}/bin",
        prefix: "/usr/share/rserver/bin",
        excludes: "*.bat",
        filemode: "755",
        username: "root",
        group: "root"
    )
    tarfileset(
        dir: "build/work/${rootProject.name}-${version}/lib",
        prefix: "/usr/share/rserver/lib",
        includes: "*.jar, sigar/*",
        username: "root",
        group: "root"
    )
    tarfileset(
        dir: "build/work/${rootProject.name}-${version}/conf",
        prefix: "/etc/rserver",
        username: "root",
        group: "root"
    )
    tarfileset(
        dir: "src/main/deb/init.d",
        includes: "rserver",
        prefix: "/etc/init.d",
        filemode: "755",
        username: "root",
        group: "root"
    )
    tarfileset(
        dir: "src/main/deb/default",
        includes: "rserver",
        prefix: "/etc/default",
        username: "root",
        group: "root"
    )
  }
}

// support incremental build for test task and artifactoryPublish
// see http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
task jenkinsTest {
  inputs.files test.outputs.files
  doLast {
    def timestamp = System.currentTimeMillis()
    if (test.testResultsDir.exists()) {
      test.testResultsDir.eachFile { it.lastModified = timestamp }
    }
    if (test.testReportDir.exists()) {
      test.testReportDir.eachFile { it.lastModified = timestamp }
    }
  }
}
build.dependsOn(jenkinsTest)
artifactoryPublish.dependsOn(jenkinsTest)

// create jar with sources
task packageSources(type: Jar, dependsOn: compileJava) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// create jar with javadoc
task packageJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives packageSources
  archives packageJavadoc
}

// configure publication tu upload binary, POM.xml, sources & javadoc
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom.withXml {
        def Node root = asNode();
        root.appendNode('name', 'rserver-admin')
        root.appendNode('description', 'R server REST controller')
        root.appendNode('url', 'http://www.obiba.org')

        def org = root.appendNode('organization')
        org.appendNode('name', 'OBiBa')
        org.appendNode('url', 'http://www.obiba.org')

        def issues = root.appendNode('issueManagement')
        issues.appendNode('system', 'jira')
        issues.appendNode('url', 'http://jira.obiba.org/jira/browse/OPAL')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'https://github.com/obiba/rserver-admin')
        scm.appendNode('connection', 'scm:git:git://github.com/obiba/rserver-admin.git')
        scm.appendNode('developerConnection', 'scm:git:git://github.com/obiba/rserver-admin.git')

        def license = root.appendNode('licenses').appendNode('license');
        license.appendNode('name', 'GNU Public License version 3')
        license.appendNode('url', 'http://www.obiba.org/node/62')
        license.appendNode('distribution', 'repo')
      }
      artifact packageSources {
        classifier "sources"
      }
      artifact packageJavadoc {
        classifier "javadoc"
      }
    }
  }
}

// configure artifactory plugin
artifactory {
  contextUrl = 'http://repo.obiba.org'
  publish {
    repository {
      // these settings are overridden by Artifactory Jenkins plugin
      repoKey = 'libs-snapshot-local'
      username = 'user'
      password = 'password'
    }
    defaults {
      publications('mavenJava')
    }
  }
  resolve {
    contextUrl = 'http://repo.obiba.org'
    repository {
      repoKey = 'libs-releases'
    }
  }
}

// Reporting
apply plugin: 'project-report'
reporting {
  baseDir "$buildDir/reports"
}

// FindBugs
apply plugin: 'findbugs'
findbugs {
  reportsDir = file("${reporting.baseDir}/findbugs-output")
  excludeFilter = file(rootProject.file('src/main/resources/findbugs-exclude.xml'))
  ignoreFailures = true
}

// PMD
task pmd << {
  if (!file('src').exists()) return;
  file("${reporting.baseDir}").mkdirs()
  ant {
    taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmd.asPath)
    pmd(shortFilenames: 'true', failonruleviolation: 'false', rulesetfiles: rootProject.file('src/main/resources/pmd-ruleset.xml').toURI().toString()) {
      formatter(type: 'html', toFile: "${reporting.baseDir}/pmd.html")
      formatter(type: 'xml', toFile: "${reporting.baseDir}/pmd.xml")
      fileset(dir: 'src') {
        include(name: '**/*.java')
      }
    }
  }
}